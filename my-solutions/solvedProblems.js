const solved = [
  'Find the maximum and minimum numbers in an array',
  'reverse a string',
  'find the average of a set of numbers',
  'find the most frequent element in an array',
  'implement a linked list',
  'check if a string is a palindrome',
  'write a function to check if a number is prime',
  'find the two largest numbers in an array',
  'find the most common element in an array',
  'reverse an array',
  'implement a binary search tree',
  'implement a sorting algorithm',
  'check if two strings are anagrams',
  'find the length of a string',
  'check if a number is even or odd',
  'find the sum of all elements in an array',
  'find the largest element in a binary search tree',
  'find the smallest element in a binary search tree',
  'find the difference between the largest and smallest elements in an array',
  'implement a queue',
  'Find the common elements in two sorted arrays',
  'find the middle element of a linked list',
  'find the nth element of a linked list',
  'find the number of elements in a linked list',
  'check if a linked list contains a cycle',
  'find the intersection of two linked lists',
  'Check if a binary tree is balanced',
  'find the maximum depth of a binary tree',
  'traverse a binary tree in pre-order',
  'traverse a binary tree in post-order',
  'traverse a binary tree in in-order',
  'Find the lowest common ancestor of two nodes in a binary tree',
  'check if a string is a valid number',
  'implement a hash table',
  'find the longest substring without repeating characters',
  'find the largest sum of a consecutive subarray',
  'find the length of the longest common subsequence',
  'find the number of ways to make change for a given amount',
  'find the number of valid parentheses combinations',
  'find the number of ways to traverse a matrix',
  'find the number of islands in a 2d grid',
  'find the number of connected components in a graph',
  'Find the shortest path between two nodes in a graph',
  'Find the diameter of a binary tree',
];

function getSolved() {
  return solved;
}
